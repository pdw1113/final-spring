<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="userMapper">

	<!-- parameterType : #{id}로 들어가는 매개변수의 타입 -->

	<resultMap type="User" id="userResultSet">
		<id property="email" column="USER_EMAIL" />
		<result property="pwd" column="USER_PASSWORD" />
		<result property="name" column="USER_NAME" />
		<result property="email" column="USER_EMAIL" />
		<result property="phone" column="USER_PHONE" />
		<result property="enrollDate" column="USER_ENROLLDATE" />
		<result property="updateDate" column="USER_UPDATEDATE" />
		<result property="status" column="USER_STATUS" />
		<result property="marketingT" column="USER_MARKETING_T" />
		<result property="marketingE" column="USER_MARKETING_E" />
	</resultMap>
	
	<resultMap type="UserMasterSchool" id="userMasterSchoolResultSet">
		<result property="email" column="USER_EMAIL"/>
		<result property="sHigh" column="MASTER_HIGH"/>
		<result property="sUniv" column="MASTER_UNIV"/>
		<result property="sUnivDept" column="MASTER_UNIV_DEPT"/>
		<result property="sUnivPicOri" column="MASTER_UNIV_PIC_ORI"/>
		<result property="sUnivPicRe" column="MASTER_UNIV_PIC_RE"/>
		<result property="sUniv2" column="MASTER_UNIV2"/>
		<result property="sUniv2Dept" column="MASTER_UNIV2_DEPT"/>
		<result property="sUniv2PicOri" column="MASTER_UNIV2_PIC_ORI"/>
		<result property="sUniv2PicRe" column="MASTER_UNIV2_PIC_RE"/>
	</resultMap>
	
	<resultMap type="UserMasterQualifcation" id="userMasterQualifcationResultSet">
		<result property="email" column="USER_EMAIL"/>
		<result property="q1" column="MASTER_QUALIFICATION1"/>
		<result property="q1PicOri" column="MASTER_QUALIFICATION1_PIC_ORI"/>
		<result property="q1PicRe" column="MASTER_QUALIFICATION1_PIC_RE"/>
		<result property="q2" column="MASTER_QUALIFICATION2"/>
		<result property="q2PicOri" column="MASTER_QUALIFICATION2_PIC_ORI"/>
		<result property="q2PicRe" column="MASTER_QUALIFICATION2_PIC_RE"/>
		<result property="q3" column="MASTER_QUALIFICATION3"/>
		<result property="q3PicOri" column="MASTER_QUALIFICATION3_PIC_ORI"/>
		<result property="q3PicRe" column="MASTER_QUALIFICATION3_PIC_RE"/>
		<result property="q4" column="MASTER_QUALIFICATION4"/>
		<result property="q4PicOri" column="MASTER_QUALIFICATION4_PIC_ORI"/>
		<result property="q4PicRe" column="MASTER_QUALIFICATION4_PIC_RE"/>
		<result property="q5" column="MASTER_QUALIFICATION5"/>
		<result property="q5PicOri" column="MASTER_QUALIFICATION5_PIC_ORI"/>
		<result property="q5PicRe" column="MASTER_QUALIFICATION5_PIC_RE"/>
	</resultMap>
	
	<resultMap type="UserMasterSns" id="userMasterSnsResultSet">
		<result property="email" column="USER_EMAIL"/>
		<result property="snsInsta" column="MASTER_INSTAGRAM"/>
		<result property="snsTwit" column="MASTER_TWITTER"/>
		<result property="snsBlog" column="MASTER_BLOG"/>
		<result property="snsGit" column="MASTER_GIT"/>
		<result property="snsYou1" column="MASTER_YOTUBUE1"/>
		<result property="snsYou2" column="MASTER_YOTUBUE2"/>
		<result property="snsYou3" column="MASTER_YOTUBUE3"/>
	</resultMap>
	
	<resultMap type="UserMaster" id="userMasterResultSet">
		<id property="mNickname" column="MASTER_NICKNAME" />
		<result property="email" column="USER_EMAIL" />
		<result property="mRankname" column="MASTER_RANKNAME" />
		<result property="mRankPic" column="MASTER_RANK_PIC" />
		<result property="mProPicRe" column="MASTER_PROFILE_PIC_RE" />
		<result property="mCategory" column="MASTER_CATEGORY" />
		<result property="mIdPicRe" column="MASTER_ID_PIC_RE" />
		<result property="mWorkDay" column="MASTER_WORKDAY" />
		<result property="mWorkStyle" column="MASTER_WORKSTYLE" />
		<result property="mStartTime" column="MASTER_STARTTIME" />
		<result property="mEndTime" column="MASTER_ENDTIME" />
		<result property="mStar" column="MASTER_STAR" />
	</resultMap>
	
	<resultMap type="UserWallet" id="userWalletResultSet">
		<result property="wemail" column="USER_EMAIL"/>
		<result property="wnum" column="USER_PAY_NUM"/>
		<result property="wdate" column="USER_PAY_DATE"/>
		<result property="whistory" column="USER_PAY_HISTORY"/>
		<result property="wmoney" column="USER_PAY_MONEY"/>
		<result property="wmethod" column="USER_PAY_METHOD"/>
	</resultMap>
	
   	<resultMap type="Product" id="productResultSet">
      	<id property="no" column="PRODUCT_NO" />
      	<result property="nickName" column="MASTER_NICKNAME" />
      	<result property="title" column="PRODUCT_TITLE" />
      	<result property="pic" column="PRODUCT_PIC" />
      	<result property="renamePic" column="PRODUCT_RENAMEPIC" />
      	<result property="cateone" column="PRODUCT_CATEONE" />
      	<result property="category" column="PRODUCT_CATEGORY" />
      	<result property="price" column="PRODUCT_PRICE" />
      	<result property="career" column="PRODUCT_CAREER" />
      	<result property="portfolio" column="PRODUCT_PORTFOLIO" />
      	<result property="introduce" column="PRODUCT_INTRODUCE" />
      	<result property="createDate" column="PRODUCT_CREATE_DATE" />
      	<result property="modifyDate" column="PRODUCT_MODIFY_DATE" />
      	<result property="count" column="PRODUCT_COUNT" />
      	<result property="star" column="PRODUCT_STAR" />
   	</resultMap>
	
	<resultMap type="UserBuyList" id="UserBuyListResultSet">
		<id property="num" column="USER_BUY_NUM" />
		<result property="email" column="USER_EMAIL" />
		<result property="pno" column="USER_PNO" />
		<result property="date" column="USER_BUY_DATE" />
		<result property="master" column="USER_BUY_MASTER" />
		<result property="title" column="USER_BUY_TITLE" />
		<result property="money" column="USER_BUY_MONEY" />
		<result property="refund" column="USER_BUY_REFUND" />
	</resultMap>
	
	<resultMap type="Admin" id="adminResultSet">
		<result property="email" column="USER_EMAIL" />
	</resultMap>
	
	<resultMap type="Thanos" id="thanosResultSet">
		<result property="nickname" column="MASTER_NICKNAME"/>
		<result property="content" column="THANOS_CONTENT"/>
		<result property="thanosPic" column="THANOS_PIC_ORI"/>
		<result property="thanosPicRe" column="THANOS_PIC_RE"/>
	</resultMap>

	<!-- 로그인 -->
	<select id="loginUser" parameterType="User"
		resultMap="userResultSet">
		<!-- 암호화 전 -->
		<!-- SELECT * FROM NEEZ_USER WHERE USER_EMAIL = #{email} AND USER_PASSWORD 
			= #{pwd} AND USER_STATUS = 'N' -->

		<!-- 암호화 후 -->
		SELECT *
		FROM NEEZ_USER
		WHERE USER_EMAIL = #{email}
		AND USER_STATUS = 'N'
	</select>

	<!-- 회원가입 -->
	<insert id="insertUser" parameterType="User">
		INSERT INTO NEEZ_USER
		VALUES(#{name},#{phone},#{email},#{pwd},default,default,default,default,default)
	</insert>

	<!-- 휴대폰번호 중복 체크 -->
	<select id="phoneCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		FROM NEEZ_USER
		WHERE USER_PHONE = #{phone}
	</select>

	<!-- 이메일 중복 체크 -->
	<select id="emailCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		FROM NEEZ_USER
		WHERE USER_EMAIL = #{email}
	</select>

	<!-- 휴대폰번호 변경 -->
	<update id="modifyPhone" parameterType="User">
		UPDATE NEEZ_USER
		SET USER_PHONE = #{phone}
		WHERE USER_EMAIL = #{email}
	</update>

	<!-- 능력자 등록 -->
	<insert id="insertMaster" parameterType="UserMaster">
		INSERT INTO NEEZ_MASTER
		VALUES(#{email},default,default,#{mProPicOri},#{mProPicRe},#{mNickname},#{mCategory},#{mIdPicOri},#{mIdPicRe},#{mWorkDay},#{mWorkStyle},#{mStartTime},#{mEndTime},DEFAULT)
	</insert>

	<!-- 능력자 학력 등록 -->
	<insert id="insertMasterSchool">
		INSERT INTO SCHOOL (USER_EMAIL, MASTER_HIGH, MASTER_UNIV, MASTER_UNIV_DEPT,
		MASTER_UNIV_PIC_ORI, MASTER_UNIV_PIC_RE, MASTER_UNIV2,
		MASTER_UNIV2_DEPT, MASTER_UNIV2_PIC_ORI, MASTER_UNIV2_PIC_RE)
		VALUES(#{email},#{sHigh},#{sUniv},#{sUnivDept},#{sUnivPicOri},#{sUnivPicRe},#{sUniv2},#{sUniv2Dept},#{sUniv2PicOri},#{sUniv2PicRe})
	</insert>

	<!-- 능력자 sns 등록 -->
	<insert id="insertMasterSns">
		INSERT INTO SNS (USER_EMAIL, MASTER_INSTAGRAM, MASTER_TWITTER, MASTER_BLOG,
		MASTER_GIT, MASTER_YOTUBUE1, MASTER_YOTUBUE2, MASTER_YOTUBUE3)
		VALUES(#{email},#{snsInsta},#{snsTwit},#{snsBlog},#{snsGit},#{snsYou1},#{snsYou2},#{snsYou3})
	</insert>

	<!-- 능력자 자격증 등록 -->
	<insert id="insertMasterQfc">
		INSERT INTO QUALIFICATION (USER_EMAIL, MASTER_QUALIFICATION1,
		MASTER_QUALIFICATION1_PIC_ORI, MASTER_QUALIFICATION1_PIC_RE,
		MASTER_QUALIFICATION2, MASTER_QUALIFICATION2_PIC_ORI,
		MASTER_QUALIFICATION2_PIC_RE, MASTER_QUALIFICATION3,
		MASTER_QUALIFICATION3_PIC_ORI, MASTER_QUALIFICATION3_PIC_RE,
		MASTER_QUALIFICATION4, MASTER_QUALIFICATION4_PIC_ORI,
		MASTER_QUALIFICATION4_PIC_RE, MASTER_QUALIFICATION5,
		MASTER_QUALIFICATION5_PIC_ORI, MASTER_QUALIFICATION5_PIC_RE)
		VALUES(#{email},#{q1},#{q1PicOri},#{q1PicRe},#{q2},#{q2PicOri},#{q2PicRe},#{q3},#{q3PicOri},#{q3PicRe},#{q4},#{q4PicOri},#{q4PicRe},#{q5},#{q5PicOri},#{q5PicRe})
	</insert>

	<!-- 별명 중복 체크 -->
	<select id="nickCheck" parameterType="string" resultType="_int">
		SELECT
		COUNT(*)
		FROM NEEZ_MASTER
		WHERE MASTER_NICKNAME = #{nickname}
	</select>
	
	<!-- 별명 중복 체크(update) -->
	<select id="nickCheckUp" parameterType="string" resultType="_int">
		SELECT
		COUNT(*)
		FROM NEEZ_MASTER
		WHERE USER_EMAIL != #{email2} AND MASTER_NICKNAME = #{nickname2}
	</select>

	<!-- 마케팅 수신동의 변경 -->
	<update id="marketing" parameterType="User">
		UPDATE NEEZ_USER
		SET
		USER_MARKETING_T = #{marketingT},
		USER_MARKETING_E = #{marketingE}
		WHERE USER_EMAIL = #{email}
	</update>

	<!-- 비밀번호 변경 -->
	<update id="modifyPwd" parameterType="User">
		UPDATE NEEZ_USER
		SET
		USER_PASSWORD = #{pwd}
		WHERE USER_EMAIL = #{email}
	</update>

	<!-- 유저삭제 -->
	<update id="userDelete" parameterType="User">
		UPDATE NEEZ_USER
		SET
		USER_STATUS='Y'
		WHERE USER_EMAIL=#{email}
	</update>

	<!-- 탈퇴사유 -->
	<insert id="reason" parameterType="hashmap">
		INSERT INTO REASON
		VALUES(#{email}, #{reason})
	</insert>
	
	<!-- 보유 니즈머니 -->
	<select id="userCash" parameterType="string" resultType="_int">
		SELECT USER_CASH 
		FROM CASH
		WHERE USER_EMAIL = #{email}
	</select>
	
	<!-- 카카오페이 니즈머니 충전 -->
	<update id="neezcharge" parameterType="hashmap">
		UPDATE CASH SET USER_CASH =
		USER_CASH + #{money} WHERE USER_EMAIL=#{email}
	</update>
	
	<!-- 비밀번호 찾기 재설정 -->
	<update id="changePw" parameterType="hashmap">
		UPDATE NEEZ_USER
		SET
		USER_PASSWORD = #{pwd}
		WHERE USER_EMAIL = #{email}
	</update>
	
	<!-- 마스터 닉네임값 가져오기 -->
	<select id="master" parameterType="string" resultType="_int">
		SELECT COUNT(MASTER_NICKNAME)
		FROM NEEZ_USER NU
		JOIN NEEZ_MASTER NM ON (NU.USER_EMAIL = NM.USER_EMAIL)
		WHERE NU.USER_EMAIL = #{email}
	</select>
	
	<!-- 능력자 관리 -->
	<select id="MasterSchool" parameterType="UserMasterSchool" resultMap="userMasterSchoolResultSet">
		SELECT *
		FROM SCHOOL
		WHERE USER_EMAIL = #{email}
	</select>
	
	<select id="MasterQualifcation" parameterType="UserMasterQualifcation" resultMap="userMasterQualifcationResultSet">
		SELECT *
		FROM QUALIFICATION
		WHERE USER_EMAIL = #{email}
	</select>
	
	<select id="MasterSNS" parameterType="UserMasterSns" resultMap="userMasterSnsResultSet">
		SELECT *
		FROM SNS
		WHERE USER_EMAIL = #{email}
	</select>
	
	<!-- 능력자수정 -->
	<update id="MasterUpdate" parameterType="UserMaster">
		UPDATE NEEZ_MASTER
		SET MASTER_NICKNAME = #{mNickname},
			<if test="mProPicOri eq null">
			MASTER_PROFILE_PIC_ORI = 'not null',
			</if>
			<if test="mProPicOri neq null">
			MASTER_PROFILE_PIC_ORI = #{mProPicOri},
			</if>
			MASTER_PROFILE_PIC_RE = #{mProPicRe},
			MASTER_CATEGORY = #{mCategory},
			<if test="mIdPicOri eq null">
			MASTER_ID_PIC_ORI = 'not null',
			</if>
			<if test="mIdPicOri neq null">
			MASTER_ID_PIC_ORI = #{mIdPicOri},
			</if>
			MASTER_ID_PIC_RE = #{mIdPicRe},
			MASTER_WORKDAY = #{mWorkDay},
			MASTER_WORKSTYLE = #{mWorkStyle},
			MASTER_STARTTIME = #{mStartTime},
			MASTER_ENDTIME = #{mEndTime}
		WHERE USER_EMAIL = #{email}
	</update>
	
	<update id="MasterUpdateSch" parameterType="UserMasterSchool">
		UPDATE SCHOOL
		SET MASTER_HIGH = #{sHigh},
			MASTER_UNIV = #{sUniv},
			MASTER_UNIV_DEPT = #{sUnivDept},
			MASTER_UNIV_PIC_ORI = #{sUnivPicOri},
			MASTER_UNIV_PIC_RE = #{sUnivPicRe},
			MASTER_UNIV2 = #{sUniv2},
			MASTER_UNIV2_DEPT = #{sUniv2Dept},
			MASTER_UNIV2_PIC_ORI = #{sUniv2PicOri},
			MASTER_UNIV2_PIC_RE = #{sUniv2PicRe}
		WHERE USER_EMAIL = #{email}
	</update>
	
	<update id="MasterUpdateQfa" parameterType="UserMasterQualifcation">
		UPDATE QUALIFICATION
		SET MASTER_QUALIFICATION1 = #{q1},
			MASTER_QUALIFICATION1_PIC_ORI = #{q1PicOri},
			MASTER_QUALIFICATION1_PIC_RE = #{q1PicRe},
			MASTER_QUALIFICATION2 = #{q2},
			MASTER_QUALIFICATION2_PIC_ORI = #{q2PicOri},
			MASTER_QUALIFICATION2_PIC_RE = #{q2PicRe},
			MASTER_QUALIFICATION3 = #{q3},
			MASTER_QUALIFICATION3_PIC_ORI = #{q3PicOri},
			MASTER_QUALIFICATION3_PIC_RE = #{q3PicRe},
			MASTER_QUALIFICATION4 = #{q4},
			MASTER_QUALIFICATION4_PIC_ORI = #{q4PicOri},
			MASTER_QUALIFICATION4_PIC_RE = #{q4PicRe},
			MASTER_QUALIFICATION5 = #{q5},
			MASTER_QUALIFICATION5_PIC_ORI = #{q5PicOri},
			MASTER_QUALIFICATION5_PIC_RE = #{q5PicRe}
		WHERE USER_EMAIL = #{email}
	</update>
	
	<update id="MasterUpdateSns" parameterType="UserMasterSns">
		UPDATE SNS
		SET MASTER_INSTAGRAM = #{snsInsta},
			MASTER_TWITTER = #{snsTwit},
			MASTER_BLOG = #{snsBlog},
			MASTER_GIT = #{snsGit},
			MASTER_YOTUBUE1 = #{snsYou1},
			MASTER_YOTUBUE2 = #{snsYou2},
			MASTER_YOTUBUE3 = #{snsYou3}
		WHERE USER_EMAIL = #{email}
	</update>
	
	<!-- 유저 결제리스트 조회(보유니즈머니 페이지) -->
	<select id="getUserWallet" parameterType="string" resultMap="userWalletResultSet" >
		SELECT * FROM PAYLIST
		WHERE USER_EMAIL=#{email} ORDER BY USER_PAY_NUM DESC
	</select>
	
	<!-- 카카오페이 충전시 결제리스트 삽입-->
	<insert id="chargePaylist" parameterType="hashmap">
		INSERT INTO PAYLIST
        VALUES(#{email},
        (SELECT NVL(MAX(USER_PAY_NUM),0)+1 
        		FROM PAYLIST WHERE USER_EMAIL=#{email}),
		DEFAULT,'니즈머니 충전',#{money},'카카오페이')
	</insert>
	
	<!-- 출금 -->
	<update id="withdraw" parameterType="hashmap">
		UPDATE CASH SET USER_CASH =
		USER_CASH - #{money} WHERE USER_EMAIL=#{email}
	</update>
	
	<!-- 출금 계좌 -->
	<insert id="withdraw2" parameterType="hashmap">
		INSERT INTO WITHDRAW VALUES (USER_WITHDRAW_NUM.NEXTVAL,DEFAULT,#{email},#{name}, #{money}, #{bankno}, #{bank})
	</insert>
	
	<!-- 출금시 결제리스트 삽입 -->
	<insert id="withdrawlist" parameterType="hashmap">		
		INSERT INTO PAYLIST
        VALUES(#{email},
        (SELECT NVL(MAX(USER_PAY_NUM),0)+1 
        		FROM PAYLIST WHERE USER_EMAIL=#{email}),
		DEFAULT,'니즈머니 출금',#{money},'계좌이체')
	</insert>
	
	<!-- 결제리스트 리스트 카운트 -->
	<select id="getWalletCount" parameterType="hashmap" resultType="_int">
		SELECT COUNT (*) FROM PAYLIST 
		WHERE USER_EMAIL=#{email}
 		
 		<if test="search_way eq '%충전'.toString()">
 			AND USER_PAY_HISTORY LIKE '%충전'
 		</if>
 		
 		<if test="search_way eq '%출금'.toString()">
 			AND USER_PAY_HISTORY LIKE '%출금'
 		</if>
 		
 		<!-- 오늘 -->
 		<if test="buttonday eq '1'.toString() and preday eq ''.toString()">
			AND USER_PAY_DATE 
			BETWEEN TO_CHAR(SYSDATE)
			AND TO_DATE(SYSDATE)+0.99999
 		</if>
 		
 		<!-- 1개월 -->
 		<if test="buttonday eq '2'.toString() and preday eq ''.toString()">
			AND USER_PAY_DATE 
			BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-2))
			AND TO_DATE(SYSDATE)+0.99999
 		</if>
 		
 		<!-- 6개월 -->
 		<if test="buttonday eq '3'.toString() and preday eq ''.toString()">
			AND USER_PAY_DATE 
			BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-7))
			AND TO_DATE(SYSDATE)+0.99999
 		</if>
 		
 		<!-- 임의 지정 -->
 		<if test="buttonday eq ''.toString() and !preday.equals('')">
			AND USER_PAY_DATE 
			BETWEEN TO_CHAR(#{preday})
			AND TO_DATE(#{postday},'YYYY-MM-DD')+0.99999
 		</if>
	</select>
	
	<!-- 결제 리스트(더보기) -->
	<select id="getUserWalletList" parameterType="hashmap" resultMap="userWalletResultSet">
			SELECT * FROM PAYLIST
			WHERE USER_EMAIL=#{email} 
			
		<if test="search_way eq '%충전'.toString()">
 			AND USER_PAY_HISTORY LIKE '%충전'
 		</if>
 		
 		<if test="search_way eq '%출금'.toString()">
 			AND USER_PAY_HISTORY LIKE '%출금'
 		</if>
 		
		<if test="buttonday eq ''.toString() and preday eq ''.toString()">
			ORDER BY USER_PAY_NUM DESC
 		</if>
 		
 		<!-- 오늘 -->
 		<if test="buttonday eq '1'.toString() and preday eq ''.toString()">
            AND USER_PAY_DATE BETWEEN TO_CHAR(SYSDATE)
			AND TO_DATE(SYSDATE)+0.99999
			ORDER BY USER_PAY_NUM DESC
 		</if>
 		
 		<!-- 1개월 -->
 		<if test="buttonday eq '2'.toString() and preday eq ''.toString()">
            AND USER_PAY_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-2))
			AND TO_DATE(SYSDATE)+0.99999
			ORDER BY USER_PAY_NUM DESC
 		</if>
 		
 		<!-- 6개월 -->
 		<if test="buttonday eq '3'.toString() and preday eq ''.toString()">
            AND USER_PAY_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-7))
			AND TO_DATE(SYSDATE)+0.99999
			ORDER BY USER_PAY_NUM DESC
 		</if>
 		
 		<!-- 임의 지정 -->
 		<if test="buttonday eq ''.toString() and !preday.equals('')">
			AND USER_PAY_DATE BETWEEN TO_CHAR(#{preday})
			AND TO_DATE(#{postday},'YYYY-MM-DD')+0.99999
			ORDER BY USER_PAY_NUM DESC
 		</if>
	</select>
	
	<insert id="buyProduct" parameterType="UserBuyList">
		INSERT INTO BUYLIST
		VALUES(#{email},
        (SELECT NVL(MAX(USER_BUY_NUM),0)+1 
        		FROM BUYLIST WHERE USER_EMAIL=#{email}),
        #{pno},DEFAULT,#{master},#{title},#{money},DEFAULT)
	</insert>
	
	<select id="buyConfirm" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*) FROM BUYLIST WHERE USER_EMAIL=#{email} AND USER_PNO=#{pNo}
	</select>
	
	<select id="getUserBuyList" parameterType="hashmap" resultMap="UserBuyListResultSet">
			SELECT * FROM BUYLIST
			WHERE USER_EMAIL=#{email} 
			
		<if test="search_way eq '%Z'.toString()">
 			AND USER_BUY_REFUND LIKE '%Z'
 		</if>
 		
 		<if test="search_way eq '%Y'.toString()">
 			AND USER_BUY_REFUND LIKE '%Y'
 		</if>
 		
		<if test="buttonday eq ''.toString() and preday eq ''.toString()">
			ORDER BY USER_BUY_NUM DESC
 		</if>
 		
 		<!-- 오늘 -->
 		<if test="buttonday eq '1'.toString() and preday eq ''.toString()">
            AND USER_BUY_DATE BETWEEN TO_CHAR(SYSDATE)
			AND TO_DATE(SYSDATE)+0.99999
			ORDER BY USER_BUY_NUM DESC
 		</if>
 		
 		<!-- 1개월 -->
 		<if test="buttonday eq '2'.toString() and preday eq ''.toString()">
            AND USER_BUY_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-2))
			AND TO_DATE(SYSDATE)+0.99999
			ORDER BY USER_BUY_NUM DESC
 		</if>
 		
 		<!-- 6개월 -->
 		<if test="buttonday eq '3'.toString() and preday eq ''.toString()">
            AND USER_BUY_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-7))
			AND TO_DATE(SYSDATE)+0.99999
			ORDER BY USER_BUY_NUM DESC
 		</if>
 		
 		<!-- 임의 지정 -->
 		<if test="buttonday eq ''.toString() and !preday.equals('')">
			AND USER_BUY_DATE BETWEEN TO_CHAR(#{preday})
			AND TO_DATE(#{postday},'YYYY-MM-DD')+0.99999
			ORDER BY USER_BUY_NUM DESC
 		</if>
	</select>
	
	<select id="getBuyListCount" parameterType="hashmap" resultType="_int">
		SELECT COUNT (*) FROM BUYLIST 
		WHERE USER_EMAIL=#{email}
 		
 		<if test="search_way eq '%Z'.toString()">
 			AND USER_BUY_REFUND LIKE '%Z'
 		</if>
 		
 		<if test="search_way eq '%Y'.toString()">
 			AND USER_BUY_REFUND LIKE '%Y'
 		</if>
 		
 		<!-- 오늘 -->
 		<if test="buttonday eq '1'.toString() and preday eq ''.toString()">
			AND USER_BUY_DATE 
			BETWEEN TO_CHAR(SYSDATE)
			AND TO_DATE(SYSDATE)+0.99999
 		</if>
 		
 		<!-- 1개월 -->
 		<if test="buttonday eq '2'.toString() and preday eq ''.toString()">
			AND USER_BUY_DATE 
			BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-2))
			AND TO_DATE(SYSDATE)+0.99999
 		</if>
 		
 		<!-- 6개월 -->
 		<if test="buttonday eq '3'.toString() and preday eq ''.toString()">
			AND USER_BUY_DATE 
			BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-7))
			AND TO_DATE(SYSDATE)+0.99999
 		</if>
 		
 		<!-- 임의 지정 -->
 		<if test="buttonday eq ''.toString() and !preday.equals('')">
			AND USER_BUY_DATE 
			BETWEEN TO_CHAR(#{preday})
			AND TO_DATE(#{postday},'YYYY-MM-DD')+0.99999
 		</if>
	</select>
	
	<update id="refund" parameterType="string">
		UPDATE BUYLIST SET  USER_BUY_REFUND = 'Y' WHERE   USER_BUY_NUM = #{refu}
	</update>

		<!-- 찜목록 중복값 조회 -->
	<select id="WishDuplicate" parameterType="hashmap" resultType="_int">
        SELECT COUNT(*)
        FROM WISH_LIST W
		JOIN PRODUCT P ON (W.PRODUCT_NO = P.PRODUCT_NO)
        WHERE W.PRODUCT_NO = #{no} AND W.USER_EMAIL = #{email}
	</select>
	
		<!-- 찜 닉네임 중복값 가져오기  --> 
	<select id="productName" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*)
		FROM PRODUCT P
		JOIN NEEZ_MASTER M ON (P.MASTER_NICKNAME = M.MASTER_NICKNAME)
		WHERE P.MASTER_NICKNAME = #{pName} AND M.USER_EMAIL = #{email}
	</select>
	
		<!-- 찜 등록 -->
	<insert id="insertWish" parameterType="hashmap">
		INSERT INTO WISH_LIST VALUES
		(WISH_NUM_NO.NEXTVAL,#{email},#{no})
	</insert>
	
		<!-- 찜 해제 -->
	<delete id="WishDelete" parameterType="hashmap">
		DELETE FROM WISH_LIST WHERE PRODUCT_NO = #{no} AND USER_EMAIL = #{email}
	</delete>
	
		<!-- 찜 리스트 -->
	<select id="WishList"  parameterType="Product" resultMap="productResultSet">
		SELECT *
		FROM PRODUCT P
		JOIN WISH_LIST W ON (P.PRODUCT_NO = W.PRODUCT_NO)
		WHERE W.PRODUCT_NO = P.PRODUCT_NO AND W.USER_EMAIL = #{email}
	</select>
	
	<!-- 마스터 랭크 가져오기 -->
	<select id="getMasterRank" parameterType="String" resultType="String">
		SELECT MASTER_RANKNAME FROM NEEZ_MASTER 
		WHERE USER_EMAIL=#{email}
	</select>
	
	<!-- 접속기록 삽입 -->
	<insert id="insertIp" parameterType="hashmap">
		INSERT INTO USER_ACCESS VALUES(USER_ACCESS_NUM.NEXTVAL,#{email},#{name},#{rankname},#{ip},DEFAULT)
	</insert>
	
	<!-- 상품구매시 카운트 증가용 -->
	<update id="pCountUp" parameterType="String">
		UPDATE PRODUCT SET PRODUCT_COUNT = PRODUCT_COUNT+1 WHERE PRODUCT_NO = #{pno} 
	</update>
	
	<!-- 랭크sum 가져오기 -->
	<select id="rank" parameterType="String" resultType="_int">
		SELECT SUM(PRODUCT_COUNT)
		FROM PRODUCT
		WHERE MASTER_NICKNAME = #{nick}
	</select>

	<update id="rankUpdate" parameterType="hashmap">
	<choose>
	            <when test="rank gte 4 and rank lt 7">
                    UPDATE NEEZ_MASTER SET MASTER_RANKNAME = '동손', MASTER_RANK_PIC = 'lv2.png' WHERE MASTER_NICKNAME IN (SELECT B.MASTER_NICKNAME
                                                                     FROM  product B
                                                                     WHERE B.PRODUCT_NO = #{a})
                </when>
                
                <when test="rank gte 7 and rank lt 10">
                    UPDATE NEEZ_MASTER SET MASTER_RANKNAME = '은손',  MASTER_RANK_PIC = 'lv3.png' WHERE MASTER_NICKNAME IN (SELECT B.MASTER_NICKNAME
                                                                     FROM  product B
                                                                     WHERE B.PRODUCT_NO = #{a})
                </when>
                
                <when test="rank gte 10 and rank lt 13">
                    UPDATE NEEZ_MASTER SET MASTER_RANKNAME = '금손',  MASTER_RANK_PIC = 'lv4.png' WHERE MASTER_NICKNAME IN (SELECT B.MASTER_NICKNAME
                                                                     FROM  product B
                                                                     WHERE B.PRODUCT_NO = #{a})
                </when>
                
                <when test="rank gte 13 and rank lt 16">
                    UPDATE NEEZ_MASTER SET MASTER_RANKNAME = '다이아손',  MASTER_RANK_PIC = 'lv5.png' WHERE MASTER_NICKNAME IN (SELECT B.MASTER_NICKNAME
                                                                     FROM  product B
                                                                     WHERE B.PRODUCT_NO = #{a})
                </when>
                
                <when test="rank gte 16">
                    UPDATE NEEZ_MASTER SET MASTER_RANKNAME = '인피니티능력자',  MASTER_RANK_PIC = 'lv6.png' WHERE MASTER_NICKNAME IN (SELECT B.MASTER_NICKNAME
                                                                     FROM  product B
                                                                     WHERE B.PRODUCT_NO = #{a})
                </when>
                <otherwise>
                    	UPDATE NEEZ_MASTER SET MASTER_RANKNAME = '흙손', MASTER_RANK_PIC = 'lv1.png' WHERE MASTER_NICKNAME IN (SELECT B.MASTER_NICKNAME
                                                                     FROM  product B
                                                                     WHERE B.PRODUCT_NO = #{a})   
                </otherwise>
	</choose>
        
	</update>
	<select id="rankPic" parameterType="UserMaster" resultMap="userMasterResultSet">
		SELECT *
		FROM NEEZ_MASTER
		WHERE USER_EMAIL = #{email}
	</select>
	
	<select id="admin" parameterType="Admin" resultMap="adminResultSet">
		SELECT *
		FROM NEEZ_ADIMIN
		WHERE USER_EMAIL = #{email}
	</select>
	
	<!-- 타노스 파워노출 삽입 -->
	<insert id="thanosInsert" parameterType="hashmap">
		INSERT INTO THANOS VALUES(#{masterName},#{content},#{thanosPic},#{thanosPicRe})
	</insert>

	<!-- 타노스 파워노출 리스트 -->
	<select id="thanosList" resultMap="thanosResultSet">
		<![CDATA[SELECT * 
		FROM(
		    SELECT * FROM THANOS
		    ORDER BY DBMS_RANDOM.RANDOM
		) WHERE ROWNUM < 6]]>
	</select>
	

	<!-- 타노스 파워노출 값확인용 -->
	<select id="thanosList2" parameterType="String" resultMap="thanosResultSet">
		SELECT * 
		FROM THANOS
		WHERE MASTER_NICKNAME = #{masterName}
	</select>

	<!-- 타노스 파워노출 수정 -->
	<update id="thanosUpdate" parameterType="hashmap">
		UPDATE THANOS SET THANOS_CONTENT = #{content}, THANOS_PIC_ORI = #{thanosPic}, THANOS_PIC_RE = #{thanosPicRe} WHERE MASTER_NICKNAME = #{masterName1} 
	</update>

	<!-- 타노스 파워노출 삭제 -->
	<delete id="thanosDelete" parameterType="String">
		DELETE FROM THANOS WHERE MASTER_NICKNAME = #{masterName1}
	</delete>
	
	<!-- 카카오 회원가입 -->
	<insert id="insertKakao" parameterType="hashmap">
		INSERT INTO NEEZ_USER(USER_NAME,USER_PHONE,USER_EMAIL,USER_PASSWORD) VALUES(#{name},DEFAULT,#{email},#{pwd})
	</insert>
	
	<select id="selectUser" parameterType="string" resultMap="userResultSet">
		SELECT * FROM NEEZ_USER
		WHERE USER_EMAIL = #{email}
	</select>
	
</mapper>
