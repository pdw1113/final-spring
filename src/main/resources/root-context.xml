<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		root-context.xml 파일은 서버 구동 시 web.xml을 거쳐 바로 로딩되는 pre-loading되는 설정 파일
		-> DB연결설정, 트랜잭션처리, AOP관련, 외부모듈연동 등 스프링에서 제공하는 서비스들에 대한 설정을 관리
	 -->
	 
	 <!-- 기존에 mybatis-config.xml에 작성했던 DB정보 관련부분은 여기에 작성을 한다.
	 	  => Why? 서버 구동 됨과 동시에 이루어지게끔
	  -->
	  
	<!-- 1. DataSource 등록( 순서가 중요하다 ) 
		 destroy-method 주어진 세션을 자동으로 close하라는 의미의 속성
	-->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="NEEZIT"/>
		<property name="password" value="NEEZIT"/>
		<property name="defaultAutoCommit" value="false"/>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/> <!-- ref : 해당 bean을 참조 -->
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"/> <!-- ref : 해당 bean을 참조 -->
	</bean>
	
	<!-- Email에대한 Bean객체 등록 -->
	<!-- Gmail -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <property name="host" value="smtp.gmail.com" />
	    <property name="port" value="587" />
	    <property name="username" value="cjsehdals0430@gmail.com" />
	    <property name="password" value="!cjsehdalsWkd123" />
	    <property name="javaMailProperties">
	    <props>
	      <prop key="mail.smtp.auth">true</prop>
	      <prop key="mail.smtp.starttls.enable">true</prop>
	    </props>
	    </property>
	 </bean>
	 
	 <!-- 파일 업로드 시 사용(파일크기 지정)
		MultipartResolver
		CommonsMultipartResolver 빈 객체로 설정하여 파일업로드를 처리한다.
		JSP파일의 enctype을 multipart/form-data로 설정
		commons-fileupload,commons-io jar파일이 필요하다.
		
		maxUploadSize : 최대 업로드 가능한 바이트 크기, 기본값 -1이다. -1은 제한이 없음을 의미
		maxInMemorysize : 디스크에 임시파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트 크기, 기본값은 10240바이트
	-->
	<bean id="multipartResolver"
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxUploadSize" value="100000000"/>	
			<property name="maxInMemorySize" value="100000000"/>	
	</bean>
	
	
</beans>
